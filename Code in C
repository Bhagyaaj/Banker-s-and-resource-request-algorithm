#include <stdio.h>
#include <stdlib.h>
int n, m, i, j, k;
//m = 3;
int alloc[10][10], max[10][10], avail[10],inst[10],sum[10];
int f[10], ans[10], ind = 0;
int need[10][10];
void safeseq()
{
    int y = 0;
    for (k = 0; k<5; k++)
    {
        for (i = 0; i<n; i++)
        {
            if (f[i] == 0)
            {
                int flag = 0;
                for (j = 0; j<m; j++)
                {
                    if (need[i][j] > avail[j])
                    {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0)
                {
                    ans[ind++] = i;
                    for (y = 0; y<m; y++)
                        avail[y] += alloc[i][y];
                    f[i] = 1;
                }
            }
        }
    }
    int flag = 1;
    for (i = 0; i<n; i++)
    {
        if (f[i] == 0)
        {
            flag = 0;
            printf("\nThe system is not safe..\n");
            break;
        }
    }
    if (flag == 1)
    {
        printf("\nThe SAFE Sequence is:\n");
        for (i = 0; i<n - 1; i++)
            printf(" P%d->", ans[i]);
        printf("P%d", ans[n - 1]);
    }
    printf("\n");
}

int main()
{
    printf("\nEnter the number of processes:\n");
    scanf("%d", &n);
    printf("Enter the number of resource types\n");
    scanf("%d",&m);
    for (i = 0; i<m; i++)
    {
        printf("Enter the number of instances of resource %d\n",i+1);
        scanf("%d",&inst[i]);
    }
    printf("\nEnter values for the allocation matrix;\n");
    for (i = 0; i<n; i++)
    {
        for (j = 0; j<m; j++)
        {
            scanf("%d", &alloc[i][j]);
        }
    }
    printf("\nEnter values for the max matrix;\n");
    for (i = 0; i<n; i++)
    {
        for (j = 0; j<m; j++)
        {
            scanf("%d", &max[i][j]);
        }
    }
    sum[i]=0;
    for (i = 0; i<m; i++)
    {
        for (j = 0; j<n; j++)
        {
            sum[i]=sum[i] + alloc[j][i];
        }
    }
    for (i = 0; i<m; i++)
    {
        avail[i] = inst[i] - sum[i];
    }
    printf("\n\nAVAILABLE VECTOR:\n");
    for (i = 0; i<m; i++)
    {
        printf("\n%d\t", avail[i]);
    }
    for (k = 0; k<n; k++)
    {
        f[k] = 0;
    }
    printf("\n\nNEED MATRIX:\n");
    for (i = 0; i<n; i++)
    {
        for (j = 0; j<m; j++)
        {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d\t", need[i][j]);
        }
        printf("\n");
    }
    int request[10];
    int x;
    char ch;
    safeseq();
    printf("\nIs there any request from any process?(y/n)");
    scanf("\n%c", &ch);
    if (ch == 'n')
    exit(0);
    else
    {
        printf("\nEnter the process ID that needs additional resource:");
        scanf("%d", &x);
        for (i = 0; i<m; i++)
        {
            printf("\nResource request for resource %d :", i + 1);
            scanf("%d", &request[i]);
        }
        printf("\\n\nREQUEST VECTOR:\n");
        for (i = 0; i<m; i++)
        {   
            printf("%d\t",request[i]);
        }
        int flag1 = 0, flag2 = 0;
        for (i = 0; i<m; i++)
        {
            if (request[i] > need[x][i])
            flag1 = 1;
        }
        if (flag1 == 0)
        {
            for (i = 0; i < m; i++)
            {
                if (request[i] > avail[i])
                flag2 = 1;
            }
        if (flag2 == 0)
        {
            for (i = 0; i < m; i++)
            {
                avail[i] -= request[i];
                alloc[x][i] += request[i];
                need[x][i] -= request[i];
            }
        }
        printf("\n\nAVAILABLE VECTOR :\n");
        for (j = 0; j < m; j++)
        printf("%d\t", avail[j]);
        printf("\n\nALLOCATION MATRIX\n");
        for (i = 0; i < n; i++)
        {
            printf("\n");
            for (j = 0; j < m; j++)
            {
                printf("%d\t", alloc[i][j]);
            }
        }
        printf("\n\nNEED MATRIX:\n");
        int need[n][m];
        for (i = 0; i < n; i++)
        {
            printf("\n");
            for (j = 0; j < m; j++)
            {
                {
                    need[i][j] = max[i][j] - alloc[i][j];
                    printf("%d\t", need[i][j]);
                }
            }
        }
        safeseq();
    }
    return (0);
    }
}
